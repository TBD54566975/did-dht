// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag/v2"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},"swagger":"2.0","info":{"description":"{{escape .Description}}","title":"{{.Title}}","contact":{"name":"TBD","url":"https://github.com/TBD54566975/did-dht-method/issues","email":"tbd-developer@squareup.com"},"license":{"name":"Apache 2.0","url":"http://www.apache.org/licenses/LICENSE-2.0.html"},"version":"{{.Version}}"},"host":"{{.Host}}","basePath":"{{.BasePath}}","paths":{"/health":{"get":{"description":"Health is a simple handler that always responds with a 200 OK","consumes":["application/json"],"produces":["application/json"],"tags":["HealthCheck"],"summary":"Health Check","responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/pkg_server.GetHealthCheckResponse"}}}}},"/v1/dht":{"put":{"description":"Publishes a DID to the DHT","consumes":["application/json"],"produces":["application/json"],"tags":["DIDDHT"],"summary":"Publish a DID to the DHT","parameters":[{"description":"Publish DID Request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/pkg_server.PublishDIDRequest"}}],"responses":{"202":{"description":"Accepted"},"400":{"description":"Bad request","schema":{"type":"string"}},"500":{"description":"Internal server error","schema":{"type":"string"}}}},"delete":{"description":"Remove a DID from the service, which stops republishing it to the DHT","consumes":["application/json"],"produces":["application/json"],"tags":["DIDDHT"],"summary":"Remove a DID from the service","parameters":[{"description":"Delete DID Request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/pkg_server.DeleteDIDRequest"}}],"responses":{"200":{"description":"OK"},"400":{"description":"Bad request","schema":{"type":"string"}},"500":{"description":"Internal server error","schema":{"type":"string"}}}}},"/v1/did":{"get":{"description":"List all DIDs from the service","consumes":["application/json"],"produces":["application/json"],"tags":["DIDDHT"],"summary":"List all DIDs from the service","responses":{"200":{"description":"OK","schema":{"type":"array","items":{"$ref":"#/definitions/pkg_server.ListDIDsResponse"}}},"500":{"description":"Internal server error","schema":{"type":"string"}}}}},"/v1/did/{id}":{"get":{"description":"Read a DID record from the DHT","consumes":["application/json"],"produces":["application/json"],"tags":["DIDDHT"],"summary":"Read a DID record from the DHT","parameters":[{"type":"string","description":"did to request","name":"id","in":"path","required":true}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/pkg_server.GetDIDResponse"}},"400":{"description":"Bad request","schema":{"type":"string"}},"500":{"description":"Internal server error","schema":{"type":"string"}}}}}},"definitions":{"cryptosuite.LDKeyType":{"type":"string","enum":["JsonWebKey2020","X25519KeyAgreementKey2020","Ed25519VerificationKey2020","X25519KeyAgreementKey2019","Ed25519VerificationKey2018","EcdsaSecp256k1VerificationKey2019","Multikey","P256Key2021","P384Key2021","P521Key2021","Bls12381G1Key2020","Bls12381G2Key2020"],"x-enum-varnames":["JSONWebKey2020Type","X25519KeyAgreementKey2020","Ed25519VerificationKey2020","X25519KeyAgreementKey2019","Ed25519VerificationKey2018","ECDSASECP256k1VerificationKey2019","MultikeyType","P256Key2021","P384Key2021","P521Key2021","BLS12381G1Key2020","BLS12381G2Key2020"]},"did.Document":{"type":"object","properties":{"@context":{},"alsoKnownAs":{"type":"string"},"assertionMethod":{"type":"array","items":{}},"authentication":{"type":"array","items":{}},"capabilityDelegation":{"type":"array","items":{}},"capabilityInvocation":{"type":"array","items":{}},"controller":{"type":"string"},"id":{"description":"As per https://www.w3.org/TR/did-core/#did-subject intermediate representations of DID Documents do not\nrequire an ID property. The provided test vectors demonstrate IRs. As such, the property is optional.","type":"string"},"keyAgreement":{"type":"array","items":{}},"service":{"type":"array","items":{"$ref":"#/definitions/did.Service"}},"verificationMethod":{"type":"array","items":{"$ref":"#/definitions/github_com_TBD54566975_ssi-sdk_did.VerificationMethod"}}}},"did.Service":{"type":"object","required":["id","serviceEndpoint","type"],"properties":{"accept":{"type":"array","items":{"type":"string"}},"id":{"type":"string"},"routingKeys":{"type":"array","items":{"type":"string"}},"serviceEndpoint":{"description":"A string, map, or set composed of one or more strings and/or maps\nAll string values must be valid URIs"},"type":{"type":"string"}}},"github_com_TBD54566975_ssi-sdk_did.VerificationMethod":{"type":"object","required":["controller","id","type"],"properties":{"blockchainAccountId":{"description":"for PKH DIDs - https://github.com/w3c-ccg/did-pkh/blob/90b28ad3c18d63822a8aab3c752302aa64fc9382/did-pkh-method-draft.md","type":"string"},"controller":{"type":"string"},"id":{"type":"string"},"publicKeyBase58":{"type":"string"},"publicKeyJwk":{"description":"must conform to https://datatracker.ietf.org/doc/html/rfc7517","allOf":[{"$ref":"#/definitions/jwx.PublicKeyJWK"}]},"publicKeyMultibase":{"description":"https://datatracker.ietf.org/doc/html/draft-multiformats-multibase-03","type":"string"},"type":{"$ref":"#/definitions/cryptosuite.LDKeyType"}}},"jwx.PublicKeyJWK":{"type":"object","required":["kty"],"properties":{"alg":{"type":"string"},"crv":{"type":"string"},"e":{"type":"string"},"key_ops":{"type":"string"},"kid":{"type":"string"},"kty":{"type":"string"},"n":{"type":"string"},"use":{"type":"string"},"x":{"type":"string"},"y":{"type":"string"}}},"pkg_server.DeleteDIDRequest":{"type":"object"},"pkg_server.GetDIDResponse":{"type":"object","properties":{"did":{"$ref":"#/definitions/did.Document"}}},"pkg_server.GetHealthCheckResponse":{"type":"object","properties":{"status":{"description":"Status is always equal to ` + "`" + `OK` + "`" + `.","type":"string"}}},"pkg_server.ListDIDsResponse":{"type":"object","properties":{"dids":{"type":"array","items":{"$ref":"#/definitions/did.Document"}}}},"pkg_server.PublishDIDRequest":{"type":"object"}}}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "{{.SVN}}",
	Host:             "{{.Server.APIHost}}",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "DID DHT Service API",
	Description:      "The DID DHT Service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
