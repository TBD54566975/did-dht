// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sqlite

import (
	"context"
)

const failedRecordCount = `-- name: FailedRecordCount :one
SELECT count(*) AS exact_count FROM failed_records
`

func (q *Queries) FailedRecordCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, failedRecordCount)
	var exact_count int64
	err := row.Scan(&exact_count)
	return exact_count, err
}

const listFailedRecords = `-- name: ListFailedRecords :many
SELECT id, failure_count FROM failed_records
`

func (q *Queries) ListFailedRecords(ctx context.Context) ([]FailedRecord, error) {
	rows, err := q.db.QueryContext(ctx, listFailedRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FailedRecord
	for rows.Next() {
		var i FailedRecord
		if err := rows.Scan(&i.ID, &i.FailureCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecords = `-- name: ListRecords :many
SELECT id, "key", value, sig, seq FROM dht_records WHERE id > (SELECT id FROM dht_records WHERE dht_records.key = ?) ORDER BY id ASC LIMIT ?
`

type ListRecordsParams struct {
	Key   []byte
	Limit int64
}

func (q *Queries) ListRecords(ctx context.Context, arg ListRecordsParams) ([]DhtRecord, error) {
	rows, err := q.db.QueryContext(ctx, listRecords, arg.Key, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DhtRecord
	for rows.Next() {
		var i DhtRecord
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Value,
			&i.Sig,
			&i.Seq,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecordsFirstPage = `-- name: ListRecordsFirstPage :many
SELECT id, "key", value, sig, seq FROM dht_records ORDER BY id ASC LIMIT ?
`

func (q *Queries) ListRecordsFirstPage(ctx context.Context, limit int64) ([]DhtRecord, error) {
	rows, err := q.db.QueryContext(ctx, listRecordsFirstPage, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DhtRecord
	for rows.Next() {
		var i DhtRecord
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Value,
			&i.Sig,
			&i.Seq,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readRecord = `-- name: ReadRecord :one
SELECT id, "key", value, sig, seq FROM dht_records WHERE key = ? LIMIT 1
`

func (q *Queries) ReadRecord(ctx context.Context, key []byte) (DhtRecord, error) {
	row := q.db.QueryRowContext(ctx, readRecord, key)
	var i DhtRecord
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.Sig,
		&i.Seq,
	)
	return i, err
}

const recordCount = `-- name: RecordCount :one
SELECT count(*) AS exact_count FROM dht_records
`

func (q *Queries) RecordCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, recordCount)
	var exact_count int64
	err := row.Scan(&exact_count)
	return exact_count, err
}

const writeFailedRecord = `-- name: WriteFailedRecord :exec
INSERT INTO failed_records(id, failure_count)
VALUES(?, ?)
ON CONFLICT (id) DO UPDATE SET failure_count = failed_records.failure_count + 1
`

type WriteFailedRecordParams struct {
	ID           []byte
	FailureCount int64
}

func (q *Queries) WriteFailedRecord(ctx context.Context, arg WriteFailedRecordParams) error {
	_, err := q.db.ExecContext(ctx, writeFailedRecord, arg.ID, arg.FailureCount)
	return err
}

const writeRecord = `-- name: WriteRecord :exec
INSERT INTO dht_records(key, value, sig, seq) VALUES(?, ?, ?, ?)
`

type WriteRecordParams struct {
	Key   []byte
	Value []byte
	Sig   []byte
	Seq   int64
}

func (q *Queries) WriteRecord(ctx context.Context, arg WriteRecordParams) error {
	_, err := q.db.ExecContext(ctx, writeRecord,
		arg.Key,
		arg.Value,
		arg.Sig,
		arg.Seq,
	)
	return err
}
